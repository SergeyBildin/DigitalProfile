Следующим этапом было построение архитектуры приложения, проектирование структуры базы данных и проработка дизаайна шаблонов(веб-страниц)
Было принято решение разделить базу данных на следующие таблицы: Account, Profile, Groups, Membership. Связь между таблицами проиллюстрирована на диаграмме№
Такая структура базы данных обусловлена тем что мы решили разбить регистрацию пользователя в системе на два этапа: 1) пользователь создает аккаунт(Account),
 вводит в форму свою электронную почту и пароль,
под которыми он в дальнейшем сможет входить в систему, а также ссылку на свой профиль вконтакте. после нажатия кнопки "Зарегистрироваться"
в обработчике этой формы вызывается асинхроннная функция get_user_skills.delay. листинг кода обработчика представлен на рисунке№. Эта функция в своем теле
вызывает метод analysis_user, который начинает анализ групп пользователя, а также она отвечает за сохранение полученной информации в базе данных и распределение
пользователей по группам на основе их интересов. На этом этапе в базе данных создаются записи Membership, которые хранят принадлежность рофиля к определенной группе.
delay в вызове этой функции означает что работать она будет в фоновом режиме и ее работа никак не повлияет на функционал пользовательского интерфейса.
Возможность вызова асинхронных функций была достигнута за счет использования библиотеки celery, которая позволяет создать очередь задач.
 Далее пользователю предлагается заполнить основные данные(в базе данных создается 
запись Profile, связанная с соответствующей записью Account посредством внешнего ключа), после чего приложение перенаправляет его на страницу его профиля. 
Здесь он увидит всю введенную им информацию, а также, если успеет отработать классификатор, навыки на основе анализа страницы вконтакте. Если алгоритм к этому
времени еще не заврешил свою работу, то пользователю нужно будет обновить страницу в веб браузере через несколько минут. После этого он сможет просматривать группы,
в которых он состоит и просматривать профили других пользователей. Этот функционал реализован за счет связи таблиц Groups и Profile ключом ManyToMany через таблицу Membership.
листинги моделей базы данных представлены на рисунке№.
Общая логика работы приложения реализована средствами фреймворка Джанго. Сначала он считывает файл настроек settings, после этого он читает файл с маршрутами шаблонов urls.py.
В каждом маршруге указано представление(views.py) - функция или класс, который, принимает запрос, реализовывает всю логику работы этой страницы и отображает ее.
 Кроме этого, представления осуществляют взаимодействие с базой данных, и отвечеют за обработку всех данных, введенных пользователем в формы(forms.py).
Также Джанго предоставляет встроеную базу данных SQ Lite 3, которая подходит для решения поставленных задач. При развертывании проекта был выбран виртуальный VPS сервер
 под управлением OS Ubuntu 18.04, предоставленный сервисом vStack. По сравнению с конкурентами, этот сервис обеспечивает стабильную работу сервера за невысокую цену.
Диаграмма общей архитектуры проекта представлена ниже: